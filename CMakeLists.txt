cmake_minimum_required (VERSION 3.1...3.15.0)

## Project basic information
project (netsnmp
    VERSION 5.8.0
    DESCRIPTION "Net-SNMP")

## Project options
option (NETSNMP_WITH_IPV6 "Build Net-SNMP with IPv6 transports." OFF)
option (NETSNMP_WITH_LIBSSH2 "Build Net-SNMP with LibSSH2." OFF)
option (NETSNMP_WITH_SDK "Build Net-SNMP with Microsoft Platform SDK." ON)
option (NETSNMP_WITH_SSL "Build Net-SNMP with OpenSSL." OFF)
option (NETSNMP_WITH_SHARED_LIBRARIES "Build shared version of the libnetsnmp library." OFF)
option (NETSNMP_WITH_WINEXTDLL "Build Net-SNMP with winExtDll." OFF)
option (NETSNMP_WITHOUT_APPS "Build Net-SNMP without apps." OFF)
option (NETSNMP_WITHOUT_INSTALL_ALL "Build Net-SNMP without installing all artifacts." OFF)
option (NETSNMP_WITHOUT_INSTALL_FILES "Build Net-SNMP without installing files." OFF)
option (NETSNMP_WITHOUT_INSTALL_HEADERS "Build Net-SNMP without installing headers." OFF)
option (NETSNMP_WITHOUT_INSTALL_LIBRARIES "Build Net-SNMP without installing libraries." OFF)
option (NETSNMP_WITHOUT_MIB_LOADING "Build Net-SNMP without MIB loading." OFF)

## Separate version number into 4 parts
string (REGEX MATCHALL "[0-9]+" _my_ver_LIST "${PROJECT_VERSION}")
list (LENGTH _my_ver_LIST _my_list_len)
list (GET _my_ver_LIST 0 NETSNMP_VER_MAJOR)
list (GET _my_ver_LIST 1 NETSNMP_VER_MINOR)
list (GET _my_ver_LIST 2 NETSNMP_VER_PATCH)
if (_my_list_len EQUAL 4)
    list (GET _my_ver_LIST 3 NETSNMP_VER_PATCHLEVEL)
endif ()

message( STATUS "Net-SNMP version ${PROJECT_VERSION}" )

list (APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

## Project compiler definitions and flags
if (WIN32)
    add_definitions (
        -D_CONSOLE
        -D_CRT_NONSTDC_NO_WARNINGS
        -D_CRT_SECURE_NO_WARNINGS
        -D_MBCS
        -D_WINSOCK_DEPRECATED_NO_WARNINGS)
endif ()
if (MSVC)
    set (CMAKE_C_FLAGS "/wd4244 /wd4267 ${CMAKE_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "/wd4244 /wd4267 ${CMAKE_CXX_FLAGS}")
endif ()
if (UNIX)
    set (CMAKE_C_FLAGS "-Wno-unused-parameter -Wno-unused-variable -Wno-implicit-function-declaration ${CMAKE_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "-Wno-unused-parameter -Wno-unused-variable -Wno-implicit-function-declaration ${CMAKE_CXX_FLAGS}")
    if (NOT APPLE)
        set (CMAKE_C_FLAGS "-Wno-format-truncation ${CMAKE_C_FLAGS}")
        set (CMAKE_CXX_FLAGS "-Wno-format-truncation ${CMAKE_CXX_FLAGS}")
    endif ()
endif ()
if (NETSNMP_WITHOUT_MIB_LOADING)
    add_definitions (
        -DNETSNMP_DISABLE_MIB_LOADING)
endif ()
if (NETSNMP_WITH_IPV6)
    add_definitions (
        -DNETSNMP_ENABLE_IPV6)
    set (NETSNMP_WITH_SDK ON)
endif ()
if (NETSNMP_WITH_SSL)
    find_package (SiblingOpenSSL)
    if (OPENSSL_FOUND)
        add_definitions (
            -DNETSNMP_USE_SIBLING_OPENSSL)
    else ()
        find_package (OpenSSL REQUIRED)
    endif ()
    add_definitions (
        -DNETSNMP_USE_OPENSSL)
endif ()
if (NETSNMP_WITH_LIBSSH2)
    find_package (SiblingLibSSH2)
endif ()
if (NETSNMP_WITH_SHARED_LIBRARIES)
    add_definitions (
        -DNETSNMP_USE_DLL)
endif ()
if (NETSNMP_WITH_WINEXTDLL)
    add_definitions (
        -DUSING_WINEXTDLL_MODULE)
endif ()

if (UNIX)
    set (CMAKE_POSITION_INDEPENDENT_CODE ON)
    if (APPLE)
        add_definitions (
            -D_FORTIFY_SOURCE=0
            -Ddarwin
            -DNETSNMP_CAN_USE_SYSCTL
            -DNETSNMP_NO_SYSTEMD)
    else ()
        add_definitions (
            -D_GNU_SOURCE
            -Dlinux)
    endif ()
endif ()

set (ETC_MNTTAB "\"unknown\"")
set (KERNEL_LOC "\"unknown\"")
set (NETSNMP_ENABLE_IPV6 1)
set (NETSNMP_NO_DUMMY_VALUES 1)
set (NETSNMP_SECMOD_USM 1)
set (NETSNMP_SYS_CONTACT "\"unknown\"")
set (NETSNMP_SYS_LOC "\"unknown\"")
set (NETSNMP_TRANSPORT_ALIAS_DOMAIN 1)
set (NETSNMP_TRANSPORT_CALLBACK_DOMAIN 1)
set (NETSNMP_TRANSPORT_IPV4BASE_DOMAIN 1)
set (NETSNMP_TRANSPORT_TCP_DOMAIN 1)
set (NETSNMP_TRANSPORT_TCPIPV6_DOMAIN 1)
set (NETSNMP_TRANSPORT_UDP_DOMAIN 1)
set (NETSNMP_TRANSPORT_UDPIPV6_DOMAIN 1)
set (NETSNMP_TRANSPORT_UDPSHARED_DOMAIN 1)
set (NETSNMP_WITH_OPAQUE_SPECIAL_TYPES 1)
set (PACKAGE_VERSION "\"${PROJECT_VERSION}.${MY_REVISION}\"")
set (SECOND_APPVERIFY_COOKIE_CB_ARG_QUALIFIER "const")
set (STDC_HEADERS 1)

if (WIN32)
    set (NETSNMP_DEFAULT_MIBDIRS "\"C:/ProgramData/net-snmp/share/mibs\"")
    set (NETSNMP_ENABLE_SCAPI_AUTHPRIV 1)
    set (NETSNMP_PERSISTENT_DIRECTORY "\"C:/ProgramData/net-snmp/persist/snmp\"")
    set (NETSNMP_TEMP_FILE_PATTERN "\"C:/ProgramData/net-snmp/temp/snmpdXXXXXX\"")
    set (RTENTRY "rtentry;")
    set (SNMPLIBPATH "\"C:/ProgramData/net-snmp/lib\"")
    set (SNMPSHAREPATH "\"C:/ProgramData/net-snmp/share\"")
    set (SNMPCONFPATH "\"C:/ProgramData/net-snmp/etc\"")
    set (SNMPDLMODPATH "\"C:/ProgramData/net-snmp/lib/dlmod\"")
    if (NETSNMP_WITH_SDK)
        set (HAVE_WIN32_PLATFORM_SDK 1)
    endif ()
endif ()
if (UNIX)
    set (NETSNMP_DEFAULT_MIBDIRS "\"/usr/local/share/snmp/mibs\"")
    set (NETSNMP_PERSISTENT_DIRECTORY "\"var/snmp\"")
    set (NETSNMP_TEMP_FILE_PATTERN "\"/tmp/snmpdXXXXXX\"")
    set (NETSNMP_TRANSPORT_STD_DOMAIN 1)
    set (NETSNMP_TRANSPORT_UNIX_DOMAIN 1)
    set (RTENTRY "struct rtentry")
    set (SNMPLIBPATH "\"/usr/local/lib/snmp\"")
    set (SNMPSHAREPATH "\"/usr/local/share/snmp\"")
    set (SNMPCONFPATH "\"/usr/local/etc/snmp\"")
    set (SNMPDLMODPATH "\"/usr/local/lib/snmp/dlmod\"")
    if (NETSNMP_WITH_LIBSSH2)
        set (NETSNMP_TRANSPORT_SSH_DOMAIN 1)
    endif ()
    if (NOT APPLE)
        set (NETSNMP_TRANSPORT_IPX_DOMAIN 1)
    endif ()
endif ()

if (NETSNMP_WITH_SSL AND OPENSSL_FOUND)
    set (HAVE_AES_CFB128_ENCRYPT 1)
    set (HAVE_ASN1_STRING_GET0_DATA 1)
    set (HAVE_DH_GET0_KEY 1)
    set (HAVE_DH_GET0_PQG 1)
    set (HAVE_DH_SET0_PQG 1)
    set (HAVE_DTLSV1_METHOD 1)
    set (HAVE_DTLS_METHOD 1)
    set (HAVE_EVP_MD_CTX_CREATE 1)
    set (HAVE_EVP_MD_CTX_DESTROY 1)
    set (HAVE_EVP_MD_CTX_FREE 1)
    set (HAVE_EVP_MD_CTX_NEW 1)
    set (HAVE_EVP_SHA224 1)
    set (HAVE_EVP_SHA384 1)
    set (HAVE_LIBCRYPTO 1)
    set (HAVE_LIBSSL 1)
    set (HAVE_LIBSSL_DTLS 1)
    set (HAVE_OPENSSL_AES_H 1)
    set (HAVE_OPENSSL_DES_H 1)
    set (HAVE_OPENSSL_DH_H 1)
    set (HAVE_OPENSSL_EVP_H 1)
    set (HAVE_OPENSSL_HMAC_H 1)
    set (HAVE_TLSV1_METHOD 1)
    set (HAVE_TLS_METHOD 1)
    set (HAVE_X509_GET_SIGNATURE_NID 1)
    set (HAVE_X509_NAME_ENTRY_GET_DATA 1)
    set (HAVE_X509_NAME_ENTRY_GET_OBJECT 1)
    set (NETSNMP_CAN_DO_CRYPTO 1)
    set (NETSNMP_TRANSPORT_DTLSUDP_DOMAIN 1)
    set (NETSNMP_TRANSPORT_TLSBASE_DOMAIN 1)
    set (NETSNMP_TRANSPORT_TLSTCP_DOMAIN 1)
endif ()

include(CheckMyTypeAndSymbol)

if (${SIZEOF_SIZE_T} STREQUAL ${SIZEOF_LONG})
    set (NETSNMP_PRIz "\"l\"")
elseif (${SIZEOF_SIZE_T} STREQUAL ${SIZEOF_LONG_LONG})
    set (NETSNMP_PRIz "\"ll\"")
else ()
    set (NETSNMP_PRIz "")
endif ()

configure_file (${PROJECT_SOURCE_DIR}/include/agent_module_dot_conf.h.cmake
    ${PROJECT_BINARY_DIR}/include/agent_module_dot_conf.h )
configure_file (${PROJECT_SOURCE_DIR}/include/agent_module_includes.h.cmake
    ${PROJECT_BINARY_DIR}/include/agent_module_includes.h )
configure_file (${PROJECT_SOURCE_DIR}/include/agent_module_inits.h.cmake
    ${PROJECT_BINARY_DIR}/include/agent_module_inits.h )
configure_file (${PROJECT_SOURCE_DIR}/include/mib_module_dot_conf.h.cmake
    ${PROJECT_BINARY_DIR}/include/mib_module_dot_conf.h )
configure_file (${PROJECT_SOURCE_DIR}/include/mib_module_includes.h.cmake
    ${PROJECT_BINARY_DIR}/include/mib_module_includes.h )
configure_file (${PROJECT_SOURCE_DIR}/include/mib_module_inits.h.cmake
    ${PROJECT_BINARY_DIR}/include/mib_module_inits.h )
configure_file (${PROJECT_SOURCE_DIR}/include/mib_module_shutdown.h.cmake
    ${PROJECT_BINARY_DIR}/include/mib_module_shutdown.h )
configure_file (${PROJECT_SOURCE_DIR}/include/snmpsm_init.h.cmake
    ${PROJECT_BINARY_DIR}/include/snmpsm_init.h )
configure_file (${PROJECT_SOURCE_DIR}/include/snmpsm_shutdown.h.cmake
    ${PROJECT_BINARY_DIR}/include/snmpsm_shutdown.h )
configure_file (${PROJECT_SOURCE_DIR}/include/net-snmp/net-snmp-config.h.cmake
    ${PROJECT_BINARY_DIR}/include/net-snmp/net-snmp-config.h )
configure_file (${PROJECT_SOURCE_DIR}/include/net-snmp/agent/agent_module_config.h.cmake
    ${PROJECT_BINARY_DIR}/include/net-snmp/agent/agent_module_config.h )
configure_file (${PROJECT_SOURCE_DIR}/include/net-snmp/agent/mib_module_config.h.cmake
    ${PROJECT_BINARY_DIR}/include/net-snmp/agent/mib_module_config.h )
configure_file (${PROJECT_SOURCE_DIR}/include/net-snmp/library/snmpv3-security-includes.h.cmake
    ${PROJECT_BINARY_DIR}/include/net-snmp/library/snmpv3-security-includes.h )
configure_file (${PROJECT_SOURCE_DIR}/include/transports/snmp_transport_inits.h.cmake
    ${PROJECT_BINARY_DIR}/include/transports/snmp_transport_inits.h )

## Project public resources
if (NOT NETSNMP_WITHOUT_INSTALL_FILES AND NOT NETSNMP_WITHOUT_INSTALL_ALL)
    file (GLOB PUBLIC_BIN_SOURCE_MIB2C "${PROJECT_SOURCE_DIR}/local/mib2c")
    install (FILES ${PUBLIC_BIN_SOURCE_MIB2C} DESTINATION bin)
    file (GLOB PUBLIC_BIN_SOURCE_TRAPTOEMAIL "${PROJECT_SOURCE_DIR}/local/traptoemail")
    install (FILES ${PUBLIC_BIN_SOURCE_TRAPTOEMAIL} DESTINATION bin)
    if (WIN32)
        file (GLOB PUBLIC_BIN_SOURCE_WIN32 "${PROJECT_SOURCE_DIR}/win32/local/*.bat")
        install (FILES ${PUBLIC_BIN_SOURCE_WIN32} DESTINATION bin)
    endif ()
endif ()
if (NOT NETSNMP_WITHOUT_INSTALL_HEADERS AND NOT NETSNMP_WITHOUT_INSTALL_ALL)
    file (GLOB PUBLIC_INCLUDE_SOURCE_NETSNMP "${PROJECT_SOURCE_DIR}/include/net-snmp/*.h")
    install (FILES ${PUBLIC_INCLUDE_SOURCE_NETSNMP} DESTINATION include/net-snmp)
    file (GLOB PUBLIC_INCLUDE_SOURCE_NETSNMP_AGENT "${PROJECT_SOURCE_DIR}/include/net-snmp/agent/*.h")
    install (FILES ${PUBLIC_INCLUDE_SOURCE_NETSNMP_AGENT} DESTINATION include/net-snmp/agent)
    file (GLOB PUBLIC_INCLUDE_SOURCE_NETSNMP_AGENT_HARDWARE "${PROJECT_SOURCE_DIR}/include/net-snmp/agent/hardware/*.h")
    install (FILES ${PUBLIC_INCLUDE_SOURCE_NETSNMP_AGENT_HARDWARE} DESTINATION include/net-snmp/agent/hardware)
    file (GLOB PUBLIC_INCLUDE_SOURCE_NETSNMP_DATA_ACCESS "${PROJECT_SOURCE_DIR}/include/net-snmp/data_access/*.h")
    install (FILES ${PUBLIC_INCLUDE_SOURCE_NETSNMP_DATA_ACCESS} DESTINATION include/net-snmp/data_access)
    file (GLOB PUBLIC_INCLUDE_SOURCE_NETSNMP_LIBRARY "${PROJECT_SOURCE_DIR}/include/net-snmp/library/*.h")
    install (FILES ${PUBLIC_INCLUDE_SOURCE_NETSNMP_LIBRARY} DESTINATION include/net-snmp/library)
    file (GLOB PUBLIC_INCLUDE_SOURCE_NETSNMP_MACHINE "${PROJECT_SOURCE_DIR}/include/net-snmp/machine/*.h")
    install (FILES ${PUBLIC_INCLUDE_SOURCE_NETSNMP_MACHINE} DESTINATION include/net-snmp/machine)
    file (GLOB PUBLIC_INCLUDE_SOURCE_NETSNMP_SYSTEM "${PROJECT_SOURCE_DIR}/include/net-snmp/system/*.h")
    install (FILES ${PUBLIC_INCLUDE_SOURCE_NETSNMP_SYSTEM} DESTINATION include/net-snmp/system)
    file (GLOB PUBLIC_INCLUDE_BINARY_NETSNMP "${PROJECT_BINARY_DIR}/include/net-snmp/*.h")
    install (FILES ${PUBLIC_INCLUDE_BINARY_NETSNMP} DESTINATION include/net-snmp)
    file (GLOB PUBLIC_INCLUDE_BINARY_NETSNMP_AGENT "${PROJECT_BINARY_DIR}/include/net-snmp/agent/*.h")
    install (FILES ${PUBLIC_INCLUDE_BINARY_NETSNMP_AGENT} DESTINATION include/net-snmp/agent)
    file (GLOB PUBLIC_INCLUDE_BINARY_NETSNMP_LIBRARY "${PROJECT_BINARY_DIR}/include/net-snmp/library/*.h")
    install (FILES ${PUBLIC_INCLUDE_BINARY_NETSNMP_LIBRARY} DESTINATION include/net-snmp/library)
endif ()
if (NOT NETSNMP_WITHOUT_INSTALL_FILES AND NOT NETSNMP_WITHOUT_INSTALL_ALL)
    file (GLOB PUBLIC_SHARE_SNMP "${PROJECT_SOURCE_DIR}/local/mib*.conf")
    install (FILES ${PUBLIC_SHARE_SNMP} DESTINATION share/snmp)
    file (GLOB PUBLIC_SHARE_SNMP_MIBS "${PROJECT_SOURCE_DIR}/mibs/*.txt")
    install (FILES ${PUBLIC_SHARE_SNMP_MIBS} DESTINATION share/snmp/mibs)
    file (GLOB PUBLIC_SHARE_SNMP_MIB2C_DATA "${PROJECT_SOURCE_DIR}/local/mib2c-conf.d/*.m2*")
    install (FILES ${PUBLIC_SHARE_SNMP_MIB2C_DATA} DESTINATION share/snmp/mib2c-data)
    file (GLOB PUBLIC_SHARE_SNMP_SNMPCONF_DATA_SNMP_DATA "${PROJECT_SOURCE_DIR}/local/snmpconf.dir/snmp-data/*")
    install (FILES ${PUBLIC_SHARE_SNMP_SNMPCONF_DATA_SNMP_DATA} DESTINATION share/snmp/snmpconf-data/snmp-data)
    file (GLOB PUBLIC_SHARE_SNMP_SNMPCONF_DATA_SNMPD_DATA "${PROJECT_SOURCE_DIR}/local/snmpconf.dir/snmpd-data/*")
    install (FILES ${PUBLIC_SHARE_SNMP_SNMPCONF_DATA_SNMPD_DATA} DESTINATION share/snmp/snmpconf-data/snmpd-data)
    file (GLOB PUBLIC_SHARE_SNMP_SNMPCONF_DATA_SNMPTRAPD_DATA "${PROJECT_SOURCE_DIR}/local/snmpconf.dir/snmptrapd-data/*")
    install (FILES ${PUBLIC_SHARE_SNMP_SNMPCONF_DATA_SNMPTRAPD_DATA} DESTINATION share/snmp/snmpconf-data/snmptrapd-data)
endif ()

## Process sub-components
add_subdirectory (agent)
if (NOT NETSNMP_WITHOUT_APPS)
    add_subdirectory (apps)
endif()
add_subdirectory (snmplib)
